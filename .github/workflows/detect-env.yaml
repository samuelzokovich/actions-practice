name: Deployment Configuration Pipeline

on:
  workflow_dispatch:

jobs:
  job1:
    runs-on: ubuntu-latest
    outputs:
      deployment_config: ${{ steps.update-config.outputs.deployment_config }}
    steps:
      - name: Initialize empty deployment config
        id: init-config
        run: |
          # Initialize an empty JSON array
          echo "deployment_config=[]" >> $GITHUB_ENV

      - name: Update deployment config
        id: update-config
        run: |
          # Fetch the existing deployment config from the environment variable
          deployment_config=${{ env.deployment_config }}

          # Create new JSON objects to append
          new_entry1='{
            "environment": {
              "name": "dev-us",
              "services": "service-1",
              "metadata": {
                "SX_PROJECT": "project-1",
                "GEOGRAPHY": "US",
                "STAGE": "dev"
              }
            }
          }'

          new_entry2='{
            "environment": {
              "name": "qa-us",
              "services": "service-2",
              "metadata": {
                "SX_PROJECT": "project-2",
                "GEOGRAPHY": "US",
                "STAGE": "qa"
              }
            }
          }'

          # Add new entries to the existing deployment_config
          updated_config=$(echo $deployment_config | jq ". + [$new_entry1, $new_entry2]")

          # Output the updated deployment_config for Job2
          echo "updated deployment config: $updated_config"
          echo "deployment_config=$updated_config" >> $GITHUB_ENV
          echo "deployment_config=$updated_config" >> $GITHUB_OUTPUT

  job2:
    needs: job1
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config_entry: ${{ fromJson(needs.job1.outputs.deployment_config) }}
    steps:
      - name: Process deployment config entry
        run: |
          # Access the current config entry for this iteration
          config_entry=${{ toJson(matrix.config_entry) }}
          echo "Processing deployment for: $config_entry"

          # Extract and use specific values from the JSON object
          environment_name=$(echo "${{ toJson(matrix.config_entry) }}" | jq -r '.environment.name')
          services=$(echo "${{ toJson(matrix.config_entry) }}" | jq -r '.environment.services')
          project=$(echo "${{ toJson(matrix.config_entry) }}" | jq -r '.environment.metadata.SX_PROJECT')

          # Here you can run deployment tasks based on the extracted values
          echo "Deploying to environment: $environment_name"
          echo "Services: $services"
          echo "Project: $project"
          # Add your actual deployment logic here
